1. 프로그램의 구조

int main()
{

	reuturn 0;
}
에 대한 설명


- main함수에대한 설명
- visual stduio 텍스트 편집에 대한 설명.
- 문장(statement)에 대한 설명
- 세미콜론에 대한 설명
- 표현(expression0에 대한 설명
- 변수 선언에 대한 설명 ( int x = 2; )
- 리터럴에 대한 설명 ( 상수 ) int x = 2에서 2
- #include<iostream>에 대한 설명. ( 전처리기, inputoutstream )
- 변수 출력문 설명 (std::cout<< 변수 <<std::endl; )
  std::cout에 대한 설명 (네임 스페이스 간단한 설명)
- 라이브러리에 대한 설명

연습문제
1. 표현식과 명령문의 차이는 뭘까?
- 표현식은 1+2; 이렇게 쓰는 데 출력은 되지 않는다.
  명령문은 std::cout<<1+2; 이런 식으로 컴퓨터에게 1+2 값을 출력하라는 명령을 하는 문장을 명령문이라 하지않을까 싶다.

2. 함수와 라이브러리의 차이는 뭘까?
- 라이브러리는 다른 사용자가 만든 함수들과 클래스의 집합이다.( 위키백과 )고로 함수가 라이브러리에 종속되어 있다고 볼 수 있다.

3. c++에서 문장을 끝내는 기호는 뭘까?
- 세미콜롤(;)

4. 문법 오류란 무엇인가?
- 세미콜론을 안 찍었다던가, cout을 coud 등 오타 등으로 인해 나타난 오류이다.
  논리오류도 있다. 자신이 짠 알고리즘이 잘 못된 경우 나타나는 오류다.



1.2 주석 잘 다는 법

- 주석에 대한 설명
- // or /* 문장 */
- 주의사항  영역 주석인 경우 영역이 겹칠 시 조심.
- 단축키 ctrl+k , ctrl+c
- 다음에 보는 나를 위해 주석을 다는 습관을 들이게됨.
- 주석을 문장 위에 달자.
ex  //max함수
       max(a,b)      //안좋은 표현 max 함수
- 코드만 봐도 알 수 있는 주석보다는 이유를 적자.
ex  //두 개의 변수를 비교해서 큰값을 리턴
       max(a,b);

1.3 변수와의 첫 만남.

- 객체(objects)에 대한 설명. 메모리에 위치를 가지고 있다.
- 변수(variables)에 대한 설명. 객체에대한 이름. 즉 메모리에 위치를 가지고 있는 것에 대한 이름
- L-values, R-values에 대한 간단한 설명. 메모리 주소를 프로그래머가 직접적으로 접근할 수 있는지 없는지.
- 초기화와 대입 설명
- 디버그모드와 릴리즈 모드에대한 차이를 다시 설명. 
- 디버그모드에서는 안되는게 릴리즈모드에서는 되는 코드가 있다. 릴리즈모드에서는 자동으로 초기화를 시킴. - 프로그램이 복잡해지면 위험함.
- 런타임에러에 대한 설명.
- int x=123; // initialization
- x=5; // assignment
- 변수는 항상 초기화를 하는게 좋다.

1.4 입출력 스트림과의 첫 만남 cin, cout

- std::endl에 대한 설명.
- 입력 유효성 검사

1.5 함수와의 첫 만남

- 함수를 바꿨을 시 복사 붙여넣기 보다 오른쪽 키를 눌러 rename을 활용하자.
- 디버거 활용법
- 인자,인수 차이점. 인자 -함수에서 넘겨주는 변수 
                          인수 - 함수에서 쓰는 변수
- 함수안에서 함수선언 불가능.
- 클래스안에 클래스 선언은 가능.

1.6 키워드와 식별자 이름짓기

- 키워드(예약어) 설명 -cppreference참고
- main함수는 하나만 있어야함.
- 각 이름짓기 주의사항은 이미 널리 퍼져있으므로 안씀.

연습문제 
	int total;  (o)
	int _orange; (o)
	int VALUE; (o)
	int my variable name; (x)
	int TotalCustomers; (o)
	int void; (x)
	int numFruit; (o)
	int 2some; (x)
	int meters_of_pipe; (o)

1.7 지역 범위

1.8 연산자와의 첫 만남

- 피연산자,리터럴, 단항 연산자 이항 연산자, 조건 연산자, 삼항 연산자, 등 소개

1.9 기본적인 서식 맞추기 Formatting

- 컴파일러는 공백을 무시함. 그러므로 프로그래머를 위해 코드편집창 공백관리를 잘해야함.
- indenting에 대한 설명 ( 공백을 만드는 것- 일반적으로 스페이스바 4번(tap 1번) )
- 하드 코딩과 소프트 코딩에 대한 설명 //하드 코딩은 프로그래머가 코드에서 변수값을 리터럴 같이 고정된 값을 직접 대입
   //소프트 코딩은 사용자의 입력이나 외부 파일, 등 데이터를 가져오는 방식 더 유연한 방식.

1.10 선언과 정의의 분리

1.11 헤더파일 만들기

- 다른 곳에서 add함수를 사용하고 싶기에 헤더파일을 만들고 분리함.
- <> , "" 차이 <> 표준적으로 사용되는 것과 iostream의 위치가 ""와 다름.
- ""는 헤더파일을 다른파일에 옮기면 못 찾는다. 따로 위치를 찾아줘야함.

1.12 헤더 가드가 필요한 이유

- 링킹에러가 발생하는것이 선언과 정의를 분리하기 때문이다.
- 헤더가드(#ifndef ~ , #define ~ , #pragma once, #endif)에 대한 설명 - 이중 선언이 되는 것을 막아줌. 
- 결과적으로 그냥 pragma once 쓰자.

1.13 네임스페이스( 명칭 공간 )

1.14 전처리기와의 첫 만남

- 매크로에 대한 설명 (요새는 잘 안쓴다.)
- 표준 라이브러리 가져다 쓰는 법 설명.
- define의 효력은 같은파일 안에서만 적용.








  








 