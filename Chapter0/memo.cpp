//0.0 c++ 꼭 공부해야할까
// 반복이 중요하다. 

//0.1 프로그래밍 언어란
//기계어 개념 Machine Language
//어셈블리 언어 개념 Assembly Language
//고수준 언어 개념 High-Level Languages- C++,C,Pascasl,...
//컴파일러 개념 - 코드를 변환해서 실행파일로 만들어줌. 
//인터프리터 개념 - 실행파일이 생성되지 않음. script(인터프리터에서 작성하는 code)-> 바로 실행결과를 알려줌. 
//               - 대부분의 경우 인터프리터가 더 느림. 실행파일은 한번 생성하고 계속 반복시 빠른데, 인터프리터는 매번 거쳐줘야할 과정이 있어서 느림.
//이식성 개념 - os에따라 컴파일러가 다름. 따라서 나오는 실행파일도 각 다르다. 장기적으로는 호환성이 좋아질 것.
//           - 이러한 특성때문에, os에 상관없이 같은 실행결과를 작동하는 경우 이식성이 좋다라고 말할 수 있다.(java) 

//0.2 c/c++언어 소개
// c - 데니스 리치(Dennis Ritchie)님 개발.
// c++ - c에서 기능이 확장된 것 (객체 지향적) Biarne Stroustrup 비야네 스트롭 스트롭
// c/c++ 철학 - 프로그래머를 믿어라. (위키백과 참고) 현재에선 철학이 조금 달라짐. 

//0.3 프로그래밍 과정 소개
//문제 정의 - 해법 설계 - 구현(write) - 컴파일(Compile) - 오브젝트 파일들을 링킹 (Linking) - 테스트-> 디버깅(유래까지)
//소스파일(.cpp) -> 컴파일 -> 오브젝트 파일(.o)
//오브젝트 파일(.o) -> 링커(Linker)+런타임 서포트(Runtime Support) -> 실행파일

//0.4.0 통합개발환경의 기본적인 사용법- 윈도우즈 비쥬얼 스튜디오
// 설치법 설명
// @@Hello,Wolrd 예제 - 파일만들기 부터 전부 
// cmd창에서 실행하는 법 
// std::cout 에대한 설명. cpprefernce.com, 구글에 검색하는 습관
// <<(stream) 에대한 설명.  ::(namespace) std(standard template Library)
// 디버그, 릴리즈 설명 릴리즈 일경우 디버깅을 작동안함 실행함.
// 디버그 모드에서 빌드를 할 경우 디버깅 도움될 정보 같이 들어있어서 용량이 릴리즈보다 큼. 릴리즌 배포용이라 사이즈가 작음. 실행속도 차이가 많이난다. 자료구조에서 디버그모드로 하지말고, 릴리즈로 하자.
// x86 -> 32비트  86은 칩번호일것이다.
// x64 -> 64비트 사용하는 메모리가 굉장히 커질 수 있다. 최근 게임같은 경우는 x64를 많이 씀. 

//0.4.1 코드::블럭스 설명 윈도우/리눅스
// 윈도우즈와 리눅스를 왔다갔다 할 경우 알아두자.
// 코드 블럭스 설치 설명 codeblocks-17.mings-setup.exe 를 다운받아야한다. 
// @@ 코드 블럭스로 Hello, World 예제 설명. 디버그 사용법 설명.

//0.4.2 비쥬얼 스튜디오 솔루션, 프로젝트 관리
// 솔루션
// - 프로젝트 1
// - 프로젝트 2 
// - ... ...

//이름 짓기에 대한 주의점. 
//여러 프로젝트를 만들었을 때 각 프로젝트별 실행방법!!. 유용 매번 솔루션을 만들 필요가 없다는 것.
//콘솔창이 껐다가 사라지는 경우 해결법 
//프로젝트 삭제법 


//0.5 코딩하다 막혔을 때는?
// 당황하지도 분노하지도 말자.
// IDE(통합개발툴)의 도움을 받자. 에러 내용을 보고 고치거나 구글에 검색해볼것.
// 커뮤니티의 도움을 받자. 질문글을 올리다보면 문제가 정리가되서 해결되는 경우도 있다.







