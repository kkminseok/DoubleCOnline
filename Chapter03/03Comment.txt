3.1 연산자 우선순위와 결합 법칙

- 연산자 우선순위와 결합 법칙에 대한 설명

- 위키피디아에서 우선순위에 대한 표 보시면서 설명

- Asscoiatvity는 연산의 방향이다. 

- 표를 다 못 외우므로, 괄호()를 활용하자.

- ^(캐럿)은 bitwise이다. 프로그래밍에서는 제곱이 아니다.

3.2 산술 연산자 arithmetic operators

- -(단항연산자) 사용시 붙여쓰자. ex) -1 (o) - 1(x)

- 연산자들 소개

- 음수 나눗셈시 c++11 부터 소수점 뒤 어느부분을 절삭하는 방법을 채택

- 나머지 연산시 -5 / 2  마이너스 부호가 앞에 있을 시 나머지도 음수 뒤에 있을시 양수

3.3 증감 연산자 increment decrement operators

- 전위 연산자, 후위 연산자 설명

- 연산자 사용시 주의사항 설명

3.4 sizeof, 쉼표 연산자, 조건부 연산자

- sizeof() 연산자 설명 변수를 넣어도되고, 자료형을 넣어도 된다.
  사용자 정의 자료형도 넣을 수 있다.
  sizeof는 함수가 아니고 연산자다. 표준에서 정의했고, 변수명일 경우 괄호가 없어도 작동.

- comma연산자 설명 보통 반복문에서 쓴다.

- comma연산자 주의사항 : 연산자 우선순위가 대입연산자보다 낮아서 앞에 피연산자를 대입해버린다. 뒤의 피연산자를 넣을 시 괄호를 써야한다.

- !조건부 연산자를 사용할 때! 와 주의사항

- 숙제 : 삼항 조건 연산자보다 << 연산자의 우선순위가 더 높기에 괄호를 쓰지 않으면 안됨.

 cout << "당신은 " << bMan==true ? "남자":"여자" << "입니다." << endl;

여기서 bMan을 cout으로 먼저 출력하고 리턴된 cout을 true와 상등 비교했으므로 틀린 연산이 되는 것.
출처 : http://soen.kr/lecture/ccpp/cpp4/36-1-2.htm

3.5 관계 연산자 Ralational Operators

- 관계 연산자 : if문 if else문 else 문 설명
- 부동 수소점 비교의 위험성 설명

3.6 논리 연산자 logical operators

- 논리연산자 NOT, AND, OR, XOR
- 논리연산자 우선순위에 따른 주의점
- short circuit evaluation 설명 -의도적으로 만들기도함
- AND 연산자가 OR 연산자보다 연산자 우선순위가 더 높으므로 주의 - 괄호를 쓰자.

3.7 이진수 Binary Numbers 

- 2진수에 대한 모든 설명.  

3.8 비트단위 연산자 Bitwise Operators

- 비트단위 연산자에 대한 설명. 비트끼리의 연산
- left shift, right shift, bitset에 대한 설명
- shift를 사용하는 이유는 일반적인 pow함수 나 곱하기보다 빠름.

3.9 비트 플래그, 비트 마스크 사용법 Bit flags, Bit masks

